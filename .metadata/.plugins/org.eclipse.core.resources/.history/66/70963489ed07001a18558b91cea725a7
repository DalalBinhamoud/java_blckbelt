package com.dalal.taskManager.controllers;

import java.util.List;

import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.dalal.taskManager.models.Task;
import com.dalal.taskManager.models.User;
import com.dalal.taskManager.services.TaskService;
import com.dalal.taskManager.services.UserService;

@Controller
public class AppController {
	
	 private final UserService userService;
	 private final TaskService taskService;
	    
	 public AppController(UserService userService,TaskService taskService) {
	        this.userService = userService;
	        this.taskService = taskService;
	    }
	 
	 
	  @RequestMapping("/")
	  public String newApp(@Valid @ModelAttribute("user") User user) { 	
      return "/views/index.jsp";
  }
	  
	  
	    @RequestMapping(value="/registration", method=RequestMethod.POST)
	    public String registerUser(@Valid @ModelAttribute("user") User user, BindingResult result, HttpSession session) {
	      
	    	if(!user.getPassword().contentEquals(user.getPasswordConfirmation())) {
	    		return "/views/index.jsp";
	    	}
	    	if(result.hasErrors()) {
	        	return "/views/index.jsp";
	        }
	        User theuser = userService.registerUser(user);
	        session.setAttribute("userId", theuser.getId());
	        return "redirect:/tasks";
	    }
	    
	    
	    
	    @RequestMapping(value="/login", method=RequestMethod.POST)
	    public String loginUser(@RequestParam("email") String email, @RequestParam("password") String password, Model model, HttpSession session) {
	        boolean flag = userService.authenticateUser(email, password);

	        if(flag) {
	        	System.out.println("dalal in if");
	        	User theuser = userService.findByEmail(email);
	            session.setAttribute("userId", theuser.getId());
	            return "redirect:/tasks";
	        }
	        else {
	        	System.out.println("dalal in else");
	        	model.addAttribute("error", "try again");
	        	return "/views/index.jsp";
	        }
	    }
	  
	    
	    @RequestMapping("/tasks")
	    public String showTasks(Model model,HttpSession session) {	
	    	
	    	 Long userID = (Long) session.getAttribute("userId");
	         User theuser = userService.findUserById(userID);
	         model.addAttribute("user", theuser);
	         
	        List<Task> tasks = taskService.allTasks();
	        model.addAttribute("tasks", tasks);
	        return "/views/tasks.jsp";
	    }
	    
	    
	    @RequestMapping("/tasks/new")
	    public String createTask(Model model,HttpSession session,@Valid @ModelAttribute("task") Task task) {	
	    	
	    	 Long userID = (Long) session.getAttribute("userId");
	         User theuser = userService.findUserById(userID);
	         model.addAttribute("user", theuser);
	         
//	        List<Task> tasks = theuser.getTasks();
//	        model.addAttribute("tasks", tasks);
	        
	        List<User> users = userService.allUsers();
		      model.addAttribute("users", users);  
	        
	        return "/views/new.jsp";
	    }
	    
	    
	    @RequestMapping(value="/tasks/create", method=RequestMethod.POST)
	    public String createTask(@Valid @ModelAttribute("task") Task task, BindingResult result) {
	        if (result.hasErrors()) {
	            return "/views/new.jsp";
	        } else {
	        	taskService.createTask(task);
	            return "redirect:/tasks";
	        }
	  
	    }
	    

	    @RequestMapping("/tasks/{id}")
	    public String showTask(@PathVariable("id")Long id,Model model,HttpSession session) {
	    	
		   Task task = taskService.findTask(id);
	        model.addAttribute("task", task);
	         Long userID = (Long) session.getAttribute("userId");
	         User theuser = userService.findUserById(userID);
	         model.addAttribute("user", theuser);
	        return "/views/info.jsp";
	    }
	    
	    @RequestMapping("/tasks/{id}/edit")
	    public String editTask(@PathVariable("id")Long id,Model model,HttpSession session) {
	    	
		   Task task = taskService.findTask(id);
	        model.addAttribute("task", task);
	         Long userID = (Long) session.getAttribute("userId");
	         User theuser = userService.findUserById(userID);
	         model.addAttribute("user", theuser);
	         
	         List <User> users = userService.allUsers();
	         model.addAttribute("users", users);
	        return "/views/edit.jsp";
	    }
	    
//	    @RequestMapping(value="/tasks/{id}/editTask", method=RequestMethod.POST)
//	    public String update(@PathVariable("id") Long id, @RequestParam(value="title") String title, @RequestParam(value="user") User user, @RequestParam(value="priority") String priority, BindingResult result) {
//	        Task task = taskService.updateTask(id, title, user, priority); 
//	        if(result.hasErrors()) {
//	        	return "/views/edit.jsp";
//	        }
//	        return "redirect:/tasks";
//	    }  
	    
	    @RequestMapping(value="/tasks/{id}/editTask", method=RequestMethod.POST)
	    public String update(@PathVariable("id") Long id,@Valid @ModelAttribute("task") Task task, BindingResult result) {
	        Task task = taskService.updateTask(task); 
	        if(result.hasErrors()) {
	        	return "/views/edit.jsp";
	        }
	        return "redirect:/tasks";
	    }
	    
	    
	    @RequestMapping(value="/tasks/{id}/deleteTask", method=RequestMethod.POST)
	    public void destroy(@PathVariable("id") Long id) {
	    	taskService.deleteTask(id);
	    }
	    
	    @RequestMapping("/logout")
	    public String logout(HttpSession session) {
	    	session.invalidate();
	    	return"redirect:/login";
	    }
	  
	  
}
